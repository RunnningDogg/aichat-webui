import { Button, Layout, Spin, message } from "antd";
import { SendOutlined } from "@ant-design/icons";
import UserMessage from "./UserMessage";
import AIMessage from "./AIMessage";
import { useEffect, useMemo, useRef, useState } from "react";
import TextArea from "antd/es/input/TextArea";
import { useParams } from "react-router-dom";
import { fetchEventSource } from "@microsoft/fetch-event-source";
const { Content } = Layout;
import { getGlobalAccessToken } from "../../../utils/auth";
// import myAxios from "../../../services/axios";
import dayjs from "dayjs";
import myAxios from "../../../services/axios";
import { useQueryClient } from "@tanstack/react-query";

type MessageContainerProps = {
  loading: boolean;
  arr: {
    message: string;
    chat_role: number;
    create_time: string;
    chat_id: string;
  }[];
};

type MessageArrProps = {
  message: string;
  chat_role: number;
  create_time?: string;
  chat_id: string;
};

function MessageContainer({
  loading,
  arr,
}: {
  loading: boolean;
  arr: MessageArrProps[];
}) {
  const [messageApi, contextHolder] = message.useMessage();
  const [inputText, setInputText] = useState("");
  const [messageLoading, setMessageLoading] = useState(false);
  // const { accessToken } = useAuth();
  const { file_id } = useParams();
  const queryClient = useQueryClient();

  /**
   * 新增的逻辑, 为了让用户提交信息以及AI返回信息的时候都能够自动滚动到最底部
   */

  // 把父组件传过来的arr转换成一个state
  const [messages, setMessages] = useState<MessageArrProps[]>(arr);
  // 在组件挂载或 arr 发生变化时更新 messages 状态
  useEffect(() => {
    setMessages(arr);
  }, [arr]);

  // 仿效use-chat
  const [currentChat, setCurrentChat] = useState<string | null>(null);

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "" } as const;
  }, [currentChat]);

  // 用来自动划到最后
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (messages?.length) {
      ref.current?.scrollIntoView({
        behavior: "smooth",
        // block: "end",
      });
    }
  }, [messages?.length, currentChat]);

  /**
   * 业务处理函数
   * @param e
   */
  const access_token = getGlobalAccessToken();

  async function handleSendMessage() {
    try {
      // 用来记录gpt回复的消息
      let chatContent = "";
      let useMessagecreateTime = "";
      let aiMessagecreateTime = "";
      setMessageLoading(true);
      useMessagecreateTime = dayjs().format("YYYY-MM-DD HH:mm:ss");
      // 新增用户记录
      setMessages((prevMessages) => [
        ...prevMessages,
        {
          chat_id: `chat${messages.length + 1}`,
          chat_role: 0,
          message: inputText,
          create_time: dayjs().format("YYYY-MM-DD HH:mm:ss"),
        },
      ]);
      // 请求接口
      await fetchEventSource(`/api/file/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${access_token}`,
        },
        credentials: "include",
        body: JSON.stringify({
          query: inputText,
          file_id: file_id,
        }),
        onmessage(event) {
          switch (event.event) {
            case "stream": {
              // console.log(event.data);
              // console.log(chatContent);
              const streamMessage = JSON.parse(event.data);
              chatContent += streamMessage;
              setCurrentChat(chatContent);
              break;
            }
            case "done": {
              // 把当前的消息加入到历史消息记录中, 重置currentChat
              const servernow = dayjs();
              setMessages((prevMessages) => [
                ...prevMessages,
                {
                  chat_id: `chat${prevMessages.length + 1}`,
                  message: chatContent,
                  chat_role: 1,
                  create_time: servernow.format("YYYY-MM-DD HH:mm:ss"),
                },
              ]);
              setCurrentChat(null);
              aiMessagecreateTime = dayjs().format("YYYY-MM-DD HH:mm:ss");
              break;
            }
          }
        },
        onerror(err) {
          console.log(err);
          throw new Error(err.message);
        },
      });

      console.log(chatContent);

      // 拿到后面两个数据, 然后转化成对应的消息
      // const postMessage = messages.slice(-2).map((item) => {
      //   return {
      //     chat_role: item.chat_role,
      //     message: item.message,
      //     file_id: file_id,
      //     create_time: item.create_time,
      //   };
      // });
      const postMessage = [
        {
          chat_role: 0,
          message: inputText,
          file_id: file_id,
          // create_time: dayjs().format("YYYY-MM-DD HH:mm:ss"),
          create_time: useMessagecreateTime,
        },
        {
          chat_role: 1,
          message: chatContent,
          file_id: file_id,
          create_time: aiMessagecreateTime,
        },
      ];
      console.log(postMessage);

      await myAxios.post(
        "/api/file/chat/add",
        {
          chats: postMessage,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
      setInputText("");
      // 上传数据, invalidate data
      queryClient.invalidateQueries({ queryKey: ["chat"] });
    } catch (error) {
      console.log(error);
    } finally {
      setMessageLoading(false);
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && e.shiftKey) {
      e.preventDefault();
      setInputText((prevText) => prevText + "\n");
      // messageApi.success("shift enter");
    } else if (e.key === "Enter") {
      e.preventDefault();
      messageApi.success("enter不发送消息, 请点击右边的按钮");
      // setInputText("");
    }
  };

  // console.log("file_id", file_id);

  return (
    <Content
      style={{
        height: "calc(100vh - 4rem)",
        width: "100%",
        position: "relative",
      }}
    >
      {contextHolder}
      <div className="h-[95%]">
        {loading ? (
          <Spin size="large" className="mx-auto" />
        ) : (
          <div className=" chat-container ml-auto flex  h-full flex-col   overflow-auto border-l-2 bg-slate-100 px-2 py-4">
            {messages?.map((item) => {
              return item.chat_role === 0 ? (
                <UserMessage key={item.chat_id} rawMessage={item.message} />
              ) : (
                <AIMessage key={item.chat_id} rawMessage={item.message} />
              );
            })}

            {currentChat ? (
              <AIMessage rawMessage={currentMessage.content} />
            ) : null}

            {/* for scroll */}
            <div ref={ref}></div>
          </div>
        )}
      </div>

      <div className="mx-auto mt-2 flex max-w-xl items-center gap-3">
        <TextArea
          disabled={messageLoading}
          value={inputText}
          onChange={(e) => {
            setInputText(e.target.value);
          }}
          allowClear
          autoSize={{ minRows: 1, maxRows: 2 }}
          onKeyDown={handleKeyDown}
        />
        <Button
          type="primary"
          icon={<SendOutlined />}
          loading={messageLoading}
          onClick={handleSendMessage}
        >
          发送
        </Button>
      </div>
    </Content>
  );
}

export default MessageContainer;
