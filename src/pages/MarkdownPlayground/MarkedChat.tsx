import { useEffect, useMemo, useRef, useState } from "react";
import AIMessage from "../ChatPage/components/AIMessage";
import UserMessage from "../ChatPage/components/UserMessage";
import { Button, Input, message } from "antd";
import { SendOutlined } from "@ant-design/icons";

const { TextArea } = Input;
import { fetchEventSource } from "@microsoft/fetch-event-source";
const rawMessage = `## hi 
this is jiongxinliang 需要提升父组件这里来管理这个状态，然后用prop传递给子组件渲染
- h1
- h2
## h3
`;

import dayjs from "dayjs";
const now = dayjs();
console.log(now.format("YYYY-MM-DD HH:mm:ss"));

function MarkedChat() {
  // 仿效use-chat
  const [currentChat, setCurrentChat] = useState<string | null>(null);

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "" } as const;
  }, [currentChat]);

  const [messages, setMessages] = useState([
    {
      chat_id: "chat1",
      message: rawMessage,
      chat_role: 0,
    },
    {
      chat_id: "chat2",
      message: rawMessage,
      chat_role: 1,
    },
    {
      chat_id: "chat3",
      message: rawMessage,
      chat_role: 0,
    },
  ]);

  // 用来自动划到最后
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (messages.length) {
      ref.current?.scrollIntoView({
        behavior: "smooth",
        block: "end",
      });
    }
  }, [messages.length, currentChat]);

  const [messageApi, contextHolder] = message.useMessage();

  const [inputText, setInputText] = useState("");
  // const inputRef = useRef<HTMLInputElement>(null);

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && e.shiftKey) {
      e.preventDefault();
      setInputText((prevText) => prevText + "\n");
      messageApi.success("shift enter");
    } else if (e.key === "Enter") {
      e.preventDefault();
      messageApi.success("enter不发送");
    }
  };

  const [loading, setLoading] = useState(false);

  // console.log(messages);

  async function handleSendMessage() {
    // 用来记录gpt回复的消息
    let chatContent = "";

    setLoading(false);
    // 新增用户记录
    setMessages([
      ...messages,
      {
        chat_id: `chat${messages.length + 1}`,
        chat_role: 0,
        message: inputText,
      },
    ]);

    // 请求接口
    fetchEventSource(`/api/chat`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify({
        content: inputText,
      }),
      onmessage(event) {
        // console.log(event);
        switch (event.event) {
          case "stream": {
            const streamMessage = JSON.parse(event.data);
            // console.log("streamMessage", streamMessage);
            chatContent += streamMessage;
            // console.log("chatcontent", chatContent);
            setCurrentChat(chatContent);
            break;
          }
          case "done": {
            // 把当前的消息加入到历史消息记录中, 重置currentChat
            // console.log(chatContent);
            setMessages((prevMessages) => [
              ...prevMessages,
              {
                chat_id: `chat${prevMessages.length + 1}`,
                message: chatContent,
                chat_role: 1,
              },
            ]);
            setCurrentChat(null);
            break;
          }
        }
      },
      onerror(err) {
        console.log(err);
      },
    });
    setLoading(false);
    setInputText("");
  }

  return (
    <div className="relative mx-auto flex h-screen flex-col gap-3 overflow-y-auto bg-slate-100 px-2 py-1 lg:max-w-5xl">
      {contextHolder}
      <div className="h-[90%] overflow-auto border-b">
        {messages.map((item) => {
          if (item.chat_role === 0) {
            return <UserMessage key={item.chat_id} rawMessage={item.message} />;
          } else {
            return <AIMessage key={item.chat_id} rawMessage={item.message} />;
          }
        })}
        {currentChat ? <AIMessage rawMessage={currentMessage.content} /> : null}

        <div className="scroll-element" ref={ref}></div>
      </div>

      <div className="">
        {/* absolute inset-x-0 bottom-2 right-0 -translate-y-1/2   */}
        <div className="mx-auto flex items-center gap-3 lg:max-w-xl">
          <TextArea
            value={inputText}
            onChange={(e) => {
              setInputText(e.target.value);
            }}
            allowClear
            autoSize={{ minRows: 1, maxRows: 5 }}
            onKeyDown={handleKeyDown}
            disabled={loading}
          />
          <Button
            type="primary"
            icon={<SendOutlined />}
            loading={loading}
            onClick={handleSendMessage}
            disabled={loading}
          >
            发送
          </Button>
        </div>
      </div>
    </div>
  );
}

export default MarkedChat;

{
  /* rounded-xl border border-black/10 */
}
{
  /* <textarea
            className=" w-full resize-none overflow-hidden border-0 bg-transparent py-3 pl-3 outline-0 focus:ring-0 focus-visible:ring-0"
            style={{
              maxHeight: "56px",
              height: "100px",
              overflowY: "hidden",
            }}
            placeholder="input question"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyDown={handleKeyDown}
            ref={inputRef}
          /> */
}
